import Paths

data Nat = zero | suc Nat

record True where constructor true
data False
data Wrap (A : Prop) = wrap A

unWrap : {A : Prop} -> Wrap A -> A
unWrap _ (wrap a) = a

(<=) : Nat -> Nat -> Prop
(<=) zero _ = True
(<=) (suc _) zero = False
(<=) (suc k) (suc n) = Wrap (k <= n)

{-
data (<=) (k n : Nat) where
    (<=) zero _ = zero
    (<=) (suc k) (suc n) = suc (k <= n)
-}

trans : {n k m : Nat} -> n <= k -> k <= m -> n <= m
trans zero _ _ _ q = true
trans (suc n) zero _ () _
trans (suc n) (suc k) zero _ q = q
trans (suc n) (suc k) (suc m) (wrap p) (wrap q) = wrap (trans p q)

trans-le-eq : {n k m : Nat} -> n <= k -> k = m -> n <= m
trans-le-eq n _ _ p q = transport (\x -> n <= x) q p

id-le : {n : Nat} -> n <= n
id-le zero = true
id-le (suc n) = wrap id-le

suc-le : {n k : Nat} -> n <= k -> n <= suc k
suc-le zero _ _ = true
suc-le (suc n) zero ()
suc-le (suc n) (suc k) (wrap p) = wrap (suc-le p)

data (~>) (k n : Nat)
    = id (k = n)
    | comp (m : Nat) (k ~> m) (m ~> n)
    | face (i : Nat) (i <= suc k) (suc k = n)
    | deg (i : Nat) (i <= n) (k = suc n)
    | face-face {i j : Nat} (i <= j) (j <= suc k) (suc (suc k) = n) I
    | deg-deg {i j : Nat} (j <= i) (i <= n) (k = suc (suc n)) I
    | face-deg-1 {i j m : Nat} (i <= j) (j <= m) (k = suc m) (suc m = n) I
    | face-deg-2 {i j : Nat} (j <= i) (i <= suc j) (j <= k) (k = n) I
    | face-deg-3 {i j m : Nat} (suc j <= i) (i <= suc m) (k = suc m) (suc m = n) I
    | trunc (x y : k ~> n) (x = y) (x = y) I I
  with
    face-face i j p q r left = comp (suc k) (face i (trans p q) idp) (face (suc j) (wrap q) r)
    face-face i j p q r right = comp (suc k) (face j q idp) (face i (trans (suc-le p) (wrap q)) r)
    deg-deg i j p q r left = comp (suc n) (deg (suc i) (wrap q) r) (deg j (trans p q) idp)
    deg-deg i j p q r right = comp (suc n) (deg j (suc-le (trans p q)) r) (deg i q idp)
    face-deg-1 i j m p q r s left = comp (suc k) (face i (trans (trans p q) (trans (trans-le-eq (suc-le id-le) (inv r)) (suc-le id-le))) idp) (deg (suc j) (trans-le-eq (wrap q) s) (map suc (r * s)))
    face-deg-1 i j m p q r s right = comp m (deg j q r) (face i (trans (trans p q) (suc-le id-le)) s)
    face-deg-2 i j p q r s left = comp (suc k) (face i (trans q (wrap r)) idp) (deg j (trans-le-eq r s) (map suc s))
    face-deg-2 i j p q r s right = id s
    face-deg-3 i j m p q r s left = comp (suc k) (face (suc i) (wrap (trans-le-eq q (inv r))) idp) (deg j (trans (suc-le id-le) (trans p (trans-le-eq q s))) (map suc (r * s)))
    face-deg-3 i j m p q r s right = comp m (deg j (unWrap (trans p q)) r) (face i q s)
    trunc x _ _ _ left  _ = x
    trunc _ y _ _ right _ = y
    trunc _ _ p _ i left  = p @ i
    trunc _ _ _ q i right = q @ i

record SimpType where
    spine : Nat -> Type
    simp-map : {n k : Nat} -> k ~> n -> spine n -> spine k
  with
    simp-map _ _ (id p) x = transport spine p x
    simp-map _ _ (comp f g) x = simp-map f (simp-map g x)
