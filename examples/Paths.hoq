idp : (A : Type) (a : A) -> a = a
idp _ a = path (\_ -> a)

transport : (A : Type) (B : A -> Type) (a a' : A) -> a = a' -> B a -> B a'
transport _ B _ _ p x = coe (\i -> B (p @ i)) left x right

psqueeze : (A : Type) (a a' : A) (p : a = a') (i : I) -> a = p @ i
psqueeze _ _ _ p i = path (\j -> p @ squeeze i j)

J : (A : Type) (a : A) (B : (a' : A) -> a = a' -> Type) -> B a (idp _ _) -> (a' : A) (p : a = a') -> B a' p
J _ _ B b _ p = coe (\i -> B (p @ i) (psqueeze _ _ _ p i)) left b right

{-
inv : (A : Type) (a a' : A) -> a = a' -> a' = a
inv _ a _ p = transport _ (\x -> x = a) _ _ p (idp _ _)

comp : (A : Type) (a a' a'' : A) -> a = a' -> a' = a'' -> a = a''
comp _ a _ _ p q = transport _ (\x -> a = x) _ _ q p

inv-comp : (A : Type) (a a' : A) (p : a = a') -> comp A a' a a' (inv A a a' p) p = idp _ _
inv-comp A a a' p = J A a (\x q -> comp A x a x (inv A a x q) q = idp A x) (idp (a = a) _) a' p
-}

inv-comp : (A : Type) (a : A) -> idp A a = idp A a
inv-comp A a = idp (a = a) _
