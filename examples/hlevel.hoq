import Paths
import Nat

infixr 4 ,
record Sigma (A : Type) (B : A -> Type) where
    constructor (,)
    proj1 : A
    proj2 : B proj1

isContr : Type -> Type
isContr A = Sigma A (\a -> (a' : A) -> a = a')

I-isContr : isContr I
I-isContr = left, (\i -> path (\j -> squeeze i j))

isProp : Type -> Type
isProp A = (a a' : A) -> a = a'

isSet : Type -> Type
isSet A = (a a' : A) -> isProp (a = a')

of-hlevel : Nat -> Type -> Type
of-hlevel zero A = isContr A
of-hlevel (suc n) A = (a a' : A) -> of-hlevel n (a = a')

h1-prop : (A : Type) -> of-hlevel (suc zero) A -> isProp A
h1-prop A f a a' = f a a' .proj1

contr-prop : (A : Type) -> isContr A -> isProp A
contr-prop A ((,) c f) a a' = inv (f a) * f a'

prop-h1 : (A : Type) -> isProp A -> of-hlevel (suc zero) A
prop-h1 A f a a' = inv (f a a) * f a a', Jl (\x q -> inv (f a a) * f a x = q) (inv-concat (f a a))

prop-set : (A : Type) -> isProp A -> isSet A
prop-set A p a a' = contr-prop (a = a') (prop-h1 A p a a')

isProp-isProp : (A : Type) -> isProp (isProp A)
isProp-isProp A f g = path (\i a a' -> prop-set A f a a' (f a a') (g a a') @ i)

Sigma-ext : {A : Type} {B : A -> Type} (x y : Sigma A B) (p : x.proj1 = y.proj1) -> transport B p (x.proj2) = y.proj2 -> x = y
Sigma-ext A B x y p q = path (\i -> p @ i, path-over q @ i)

isContr-isProp : (A : Type) -> isProp (isContr A)
isContr-isProp A c1 c2 = Sigma-ext c1 c2 (c1.proj2 (c2.proj1))
    (path (\i a' -> prop-set A (contr-prop A c1) (c2.proj1) a'
        (transport (\a -> (a' : A) -> a = a') (c1.proj2 (c2.proj1)) (c1.proj2) a') (c2.proj2 a') @ i))

of-hlevel-isProp : (n : Nat) (A : Type) -> isProp (of-hlevel n A)
of-hlevel-isProp zero A = isContr-isProp A
of-hlevel-isProp (suc n) A f g = path (\i a a' -> of-hlevel-isProp n (a = a') (f a a') (g a a') @ i)

data Trunc (A : Type) = inc A | trunc (Trunc A) (Trunc A) I
  with
    trunc a b left = a
    trunc a b right = b
