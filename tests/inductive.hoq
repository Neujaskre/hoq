data Nat = zero | suc Nat

data List (A : Type) = nil | cons A (List A)

infixl 60 +
(+) : Nat -> Nat -> Nat
(+) zero y = y
(+) (suc x) y = suc (x + y)

infixl 70 *
(*) : Nat -> Nat -> Nat
(*) zero _ = zero
(*) (suc x) y = y + x * y

fac : Nat -> Nat
fac zero = suc zero
fac (suc x) = suc x * fac x

append : (A : Type) -> List A -> List A -> List A
append A nil ys = ys
append A (cons x xs) ys = cons x (append A xs ys)

n0 = zero
n1 = suc n0
n2 = suc n1
n3 = suc n2
n4 = suc n3
n5 = suc n4
n6 = suc n5

test : fac n3 = n6
test = path (\_ -> n6)

downFrom : Nat -> List Nat
downFrom zero = nil
downFrom (suc n) = cons n (downFrom n)

data Empty

Empty-elim : (A : Type) -> Empty -> A
Empty-elim A ()
